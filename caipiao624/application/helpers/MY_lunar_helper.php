<?php
/**
 * 公历农历转换
 *
 * @access public
 * @param string $year 年
 * @param string $month 月
 * @param string $day 日
 * @return array
 */

if ( ! function_exists('getLunarCalendar')) 
{
	function getLunarCalendar($year = NULL, $month = NULL, $day = NULL) {
		 // 农历每月的天数。
		 // 每个元素为一年。每个元素中的数据为：[0]是闰月在哪个月，0为无闰月；
		 // [1]到[13]是每年12或13个月的每月天数；
		 // [14]是当年的天干次序，[15]是当年的地支次序
		$everymonth = array(
			 0 => array(8,0,0,0,0,0,0,0,0,0,0,0,29,30,7,1),
			 1 => array(0,29,30,29,29,30,29,30,29,30,30,30,29,0,8,2),
			 2 => array(0,30,29,30,29,29,30,29,30,29,30,30,30,0,9,3),
			 3 => array(5,29,30,29,30,29,29,30,29,29,30,30,29,30,10,4),
			 4 => array(0,30,30,29,30,29,29,30,29,29,30,30,29,0,1,5),
			 5 => array(0,30,30,29,30,30,29,29,30,29,30,29,30,0,2,6),
			 6 => array(4,29,30,30,29,30,29,30,29,30,29,30,29,30,3,7),
			 7 => array(0,29,30,29,30,29,30,30,29,30,29,30,29,0,4,8),
			 8 => array(0,30,29,29,30,30,29,30,29,30,30,29,30,0,5,9),
			 9 => array(2,29,30,29,29,30,29,30,29,30,30,30,29,30,6,10),
			 10 => array(0,29,30,29,29,30,29,30,29,30,30,30,29,0,7,11),
			 11 => array(6,30,29,30,29,29,30,29,29,30,30,29,30,30,8,12),
			 12 => array(0,30,29,30,29,29,30,29,29,30,30,29,30,0,9,1),
			 13 => array(0,30,30,29,30,29,29,30,29,29,30,29,30,0,10,2),
			 14 => array(5,30,30,29,30,29,30,29,30,29,30,29,29,30,1,3),
			 15 => array(0,30,29,30,30,29,30,29,30,29,30,29,30,0,2,4),
			 16 => array(0,29,30,29,30,29,30,30,29,30,29,30,29,0,3,5),
			 17 => array(2,30,29,29,30,29,30,30,29,30,30,29,30,29,4,6),
			 18 => array(0,30,29,29,30,29,30,29,30,30,29,30,30,0,5,7),
			 19 => array(7,29,30,29,29,30,29,29,30,30,29,30,30,30,6,8),
			 20 => array(0,29,30,29,29,30,29,29,30,30,29,30,30,0,7,9),
			 21 => array(0,30,29,30,29,29,30,29,29,30,29,30,30,0,8,10),
			 22 => array(5,30,29,30,30,29,29,30,29,29,30,29,30,30,9,11),
			 23 => array(0,29,30,30,29,30,29,30,29,29,30,29,30,0,10,12),
			 24 => array(0,29,30,30,29,30,30,29,30,29,30,29,29,0,1,1),
			 25 => array(4,30,29,30,29,30,30,29,30,30,29,30,29,30,2,2),
			 26 => array(0,29,29,30,29,30,29,30,30,29,30,30,29,0,3,3),
			 27 => array(0,30,29,29,30,29,30,29,30,29,30,30,30,0,4,4),
			 28 => array(2,29,30,29,29,30,29,29,30,29,30,30,30,30,5,5),
			 29 => array(0,29,30,29,29,30,29,29,30,29,30,30,30,0,6,6),
			 30 => array(6,29,30,30,29,29,30,29,29,30,29,30,30,29,7,7),
			 31 => array(0,30,30,29,30,29,30,29,29,30,29,30,29,0,8,8),
			 32 => array(0,30,30,30,29,30,29,30,29,29,30,29,30,0,9,9),
			 33 => array(5,29,30,30,29,30,30,29,30,29,30,29,29,30,10,10),
			 34 => array(0,29,30,29,30,30,29,30,29,30,30,29,30,0,1,11),
			 35 => array(0,29,29,30,29,30,29,30,30,29,30,30,29,0,2,12),
			 36 => array(3,30,29,29,30,29,29,30,30,29,30,30,30,29,3,1),
			 37 => array(0,30,29,29,30,29,29,30,29,30,30,30,29,0,4,2),
			 38 => array(7,30,30,29,29,30,29,29,30,29,30,30,29,30,5,3),
			 39 => array(0,30,30,29,29,30,29,29,30,29,30,29,30,0,6,4),
			 40 => array(0,30,30,29,30,29,30,29,29,30,29,30,29,0,7,5),
			 41 => array(6,30,30,29,30,30,29,30,29,29,30,29,30,29,8,6),
			 42 => array(0,30,29,30,30,29,30,29,30,29,30,29,30,0,9,7),
			 43 => array(0,29,30,29,30,29,30,30,29,30,29,30,29,0,10,8),
			 44 => array(4,30,29,30,29,30,29,30,29,30,30,29,30,30,1,9),
			 45 => array(0,29,29,30,29,29,30,29,30,30,30,29,30,0,2,10),
			 46 => array(0,30,29,29,30,29,29,30,29,30,30,29,30,0,3,11),
			 47 => array(2,30,30,29,29,30,29,29,30,29,30,29,30,30,4,12),
			 48 => array(0,30,29,30,29,30,29,29,30,29,30,29,30,0,5,1),
			 49 => array(7,30,29,30,30,29,30,29,29,30,29,30,29,30,6,2),
			 50 => array(0,29,30,30,29,30,30,29,29,30,29,30,29,0,7,3),
			 51 => array(0,30,29,30,30,29,30,29,30,29,30,29,30,0,8,4),
			 52 => array(5,29,30,29,30,29,30,29,30,30,29,30,29,30,9,5),
			 53 => array(0,29,30,29,29,30,30,29,30,30,29,30,29,0,10,6),
			 54 => array(0,30,29,30,29,29,30,29,30,30,29,30,30,0,1,7),
			 55 => array(3,29,30,29,30,29,29,30,29,30,29,30,30,30,2,8),
			 56 => array(0,29,30,29,30,29,29,30,29,30,29,30,30,0,3,9),
			 57 => array(8,30,29,30,29,30,29,29,30,29,30,29,30,29,4,10),
			 58 => array(0,30,30,30,29,30,29,29,30,29,30,29,30,0,5,11),
			 59 => array(0,29,30,30,29,30,29,30,29,30,29,30,29,0,6,12),
			 60 => array(6,30,29,30,29,30,30,29,30,29,30,29,30,29,7,1),
			 61 => array(0,30,29,30,29,30,29,30,30,29,30,29,30,0,8,2),
			 62 => array(0,29,30,29,29,30,29,30,30,29,30,30,29,0,9,3),
			 63 => array(4,30,29,30,29,29,30,29,30,29,30,30,30,29,10,4),
			 64 => array(0,30,29,30,29,29,30,29,30,29,30,30,30,0,1,5),
			 65 => array(0,29,30,29,30,29,29,30,29,29,30,30,29,0,2,6),
			 66 => array(3,30,30,30,29,30,29,29,30,29,29,30,30,29,3,7),
			 67 => array(0,30,30,29,30,30,29,29,30,29,30,29,30,0,4,8),
			 68 => array(7,29,30,29,30,30,29,30,29,30,29,30,29,30,5,9),
			 69 => array(0,29,30,29,30,29,30,30,29,30,29,30,29,0,6,10),
			 70 => array(0,30,29,29,30,29,30,30,29,30,30,29,30,0,7,11),
			 71 => array(5,29,30,29,29,30,29,30,29,30,30,30,29,30,8,12),
			 72 => array(0,29,30,29,29,30,29,30,29,30,30,29,30,0,9,1),
			 73 => array(0,30,29,30,29,29,30,29,29,30,30,29,30,0,10,2),
			 74 => array(4,30,30,29,30,29,29,30,29,29,30,30,29,30,1,3),
			 75 => array(0,30,30,29,30,29,29,30,29,29,30,29,30,0,2,4),
			 76 => array(8,30,30,29,30,29,30,29,30,29,29,30,29,30,3,5),
			 77 => array(0,30,29,30,30,29,30,29,30,29,30,29,29,0,4,6),
			 78 => array(0,30,29,30,30,29,30,30,29,30,29,30,29,0,5,7),
			 79 => array(6,30,29,29,30,29,30,30,29,30,30,29,30,29,6,8),
			 80 => array(0,30,29,29,30,29,30,29,30,30,29,30,30,0,7,9),
			 81 => array(0,29,30,29,29,30,29,29,30,30,29,30,30,0,8,10),
			 82 => array(4,30,29,30,29,29,30,29,29,30,29,30,30,30,9,11),
			 83 => array(0,30,29,30,29,29,30,29,29,30,29,30,30,0,10,12),
			 84 => array(10,30,29,30,30,29,29,30,29,29,30,29,30,30,1,1),
			 85 => array(0,29,30,30,29,30,29,30,29,29,30,29,30,0,2,2),
			 86 => array(0,29,30,30,29,30,30,29,30,29,30,29,29,0,3,3),
			 87 => array(6,30,29,30,29,30,30,29,30,30,29,30,29,29,4,4),
			 88 => array(0,30,29,30,29,30,29,30,30,29,30,30,29,0,5,5),
			 89 => array(0,30,29,29,30,29,29,30,30,29,30,30,30,0,6,6),
			 90 => array(5,29,30,29,29,30,29,29,30,29,30,30,30,30,7,7),
			 91 => array(0,29,30,29,29,30,29,29,30,29,30,30,30,0,8,8),
			 92 => array(0,29,30,30,29,29,30,29,29,30,29,30,30,0,9,9),
			 93 => array(3,29,30,30,29,30,29,30,29,29,30,29,30,29,10,10),
			 94 => array(0,30,30,30,29,30,29,30,29,29,30,29,30,0,1,11),
			 95 => array(8,29,30,30,29,30,29,30,30,29,29,30,29,30,2,12),
			 96 => array(0,29,30,29,30,30,29,30,29,30,30,29,29,0,3,1),
			 97 => array(0,30,29,30,29,30,29,30,30,29,30,30,29,0,4,2),
			 98 => array(5,30,29,29,30,29,29,30,30,29,30,30,29,30,5,3),
			 99 => array(0,30,29,29,30,29,29,30,29,30,30,30,29,0,6,4),
			 100 => array(0,30,30,29,29,30,29,29,30,29,30,30,29,0,7,5),
			 101 => array(4,30,30,29,30,29,30,29,29,30,29,30,29,30,8,6),
			 102 => array(0,30,30,29,30,29,30,29,29,30,29,30,29,0,9,7),
			 103 => array(0,30,30,29,30,30,29,30,29,29,30,29,30,0,10,8),
			 104 => array(2,29,30,29,30,30,29,30,29,30,29,30,29,30,1,9),
			 105 => array(0,29,30,29,30,29,30,30,29,30,29,30,29,0,2,10),
			 106 => array(7,30,29,30,29,30,29,30,29,30,30,29,30,30,3,11),
			 107 => array(0,29,29,30,29,29,30,29,30,30,30,29,30,0,4,12),
			 108 => array(0,30,29,29,30,29,29,30,29,30,30,29,30,0,5,1),
			 109 => array(5,30,30,29,29,30,29,29,30,29,30,29,30,30,6,2),
			 110 => array(0,30,29,30,29,30,29,29,30,29,30,29,30,0,7,3),
			 111 => array(0,30,29,30,30,29,30,29,29,30,29,30,29,0,8,4),
			 112 => array(4,30,29,30,30,29,30,29,30,29,30,29,30,29,9,5),
			 113 => array(0,30,29,30,29,30,30,29,30,29,30,29,30,0,10,6),
			 114 => array(9,29,30,29,30,29,30,29,30,30,29,30,29,30,1,7),
			 115 => array(0,29,30,29,29,30,29,30,30,30,29,30,29,0,2,8),
			 116 => array(0,30,29,30,29,29,30,29,30,30,29,30,30,0,3,9),
			 117 => array(6,29,30,29,30,29,29,30,29,30,29,30,30,30,4,10),
			 118 => array(0,29,30,29,30,29,29,30,29,30,29,30,30,0,5,11),
			 119 => array(0,30,29,30,29,30,29,29,30,29,29,30,30,0,6,12),
			 120 => array(4,29,30,30,30,29,30,29,29,30,29,30,29,30,7,1)
		);

		// 农历天干
		//$mten = array('null', '甲', '乙', '丙', '丁', '戊', '己', '庚', '辛', '壬', '癸');
		// 农历地支
		//$mtwelve = array('null', '子', '丑', '寅', '卯', '辰', '巳', '午', '未', '申', '酉', '戌', '亥');

		// 农历月份
		//$mmonth = array('闰', '正', '二', '三', '四', '五', '六', '七', '八', '九', '十', '冬', '腊', '月');
		$mmonth = array('闰', '正', '二', '三', '四', '五', '六', '七', '八', '九', '十', '冬', '腊', '');
		// 农历日
		$mday = array('null', '初一', '初二', '初三', '初四', '初五', '初六', '初七', '初八', '初九', '初十', '十一', '十二', '十三', '十四', '十五', '十六', '十七', '十八', '十九', '二十', '廿一', '廿二', '廿三', '廿四', '廿五', '廿六', '廿七', '廿八', '廿九', '三十');
		
		// 生肖
		//$shengxiao = array('鼠', '牛', '虎', '兔', '龙', '蛇', '马', '羊', '猴', '鸡', '狗', '猪');

		// 星期
		//$weekday = array('星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六');
		$weekday = array('日', '一', '二', '三', '四', '五', '六');
		
		// $total=69*365+17+11; //1970年1月1日前的就不算了
		// 阳历总天数 至1900年12月21日
		$total = 11;

		// 阴历总天数
		$mtotal = 0;
		$year = intval($year);
		$month = intval($month);
		$day = intval($day);

		if($year == 0 || $month == 0 || $day == 0) {
			exit('【年 月 日】必须要正确填写!');
		}

		if($year < 1901 || $year > 2020 || $month < 1 || $month > 12 || $day < 1 || $day > 31) {
			exit('年份或者格式出错，年份只支持1901到2020!');
		}

		// 获得日期的 Unix时间戳
		$postDate = mktime(0, 0, 0, $month, $day, $year);

		$thisDay = getdate($postDate);

		//print_r($thisDay);exit;

		$cur_wday = $thisDay['wday'];

		for($y = 1901; $y < $thisDay['year']; $y++) {
			// 计算到所求日期阳历的总天数-自1900年12月21日始,先算年的和
			$total += 365;
			if($y % 4 == 0) {
				$total++;
			}
		}

		// 'z' 年份中的第几天  0 到 366 
		$total += gmdate('z',gmmktime(0,0,0,$month,1,$year));

		// 加当月的天数
		$total = $total + $thisDay['mday'] - 1;
		
		$flag = 0;
		//判断跳出循环的条件
		$j = 0;
		while($j <= 120) { // 用农历的天数累加来判断是否超过阳历的天数
			$i = 1;
			while($i <= 13) {
				$mtotal += $everymonth[$j][$i];
				if($mtotal >= $total) {
					$flag = 1;
					break;
				}
				$i++;
			}
			if($flag == 1)
				break;
			$j++;
		}

		if($everymonth[$j][0] <> 0 && $everymonth[$j][0] < $i) {
			//对闰月修补
			$mm = $i - 1;
		} else {
			$mm = $i;
		}

		if($i == $everymonth[$j][0] + 1 && $everymonth[$j][0] <> 0) {
			#闰月
			$nlmon = $mmonth[0] . $mmonth[$mm];
			//输出农历数字格式月份
			$numMonth = $mm;		
		} else {
			$nlmon = $mmonth[$mm] . $mmonth[13];
			$numMonth = $mm;
		}
		// 计算所求月份1号的农历日期
		$md = $everymonth[$j][$i] - ($mtotal - $total);
		if($md > $everymonth[$j][$i]) {
			$md -= $everymonth[$j][$i];
		}
		$nlday = $mday[$md];
		// 输出农历数字格式日期
		$numDay = $md;
		
		/** 打包 */
		//$lunarCalendar['solar'] =  date('Y年n月j日', $postDate);
		// 公历日
		$lunarCalendar['solar'] =  date('n.j', $postDate);
		// 农历日
		$lunarCalendar['lunar'] = $nlmon .'.'. $nlday;
		// 星期
		$lunarCalendar['weekday'] = $weekday[$cur_wday];
		// 干支
		$lunarCalendar['ganzhi'] = get_ganzhi($year, $month, $day);
		// 六十干支 - 五行
		$lunarCalendar['sixty_wuxing'] = get_sixty_wuxing($lunarCalendar['ganzhi']);
		// 六十干支 - 纪年
		$sixty_year = get_sixty_year($year, $month, $day);
		$lunarCalendar['sixty_year_str'] = $sixty_year['sixty_year_str'];
		$lunarCalendar['sixty_year_int'] = $sixty_year['sixty_year_int'];
		// 十二生肖年
		$lunarCalendar['shengxiao'] = get_shengxiao($lunarCalendar['sixty_year_str']);
		// 相冲岁数
		$lunarCalendar['suishu'] = get_suishu($year, $month, $day);
		// 相冲资料获取
		$xiangchong = get_xiangchong($lunarCalendar['ganzhi']);
		// 相冲干支
		$lunarCalendar['xiangchong_ganzhi'] = $xiangchong['xiangchong_ganzhi'];
		// 相冲纳音
		$lunarCalendar['xiangchong_nayin'] = $xiangchong['xiangchong_nayin'];
		// 九宫星
		$lunarCalendar['jiugongxing'] = get_jgx($year, $month, $day);


		
		/** 清空 */
		unset($everymonth, $mmonth, $mday, $weekday);


		//$nowday = date('Y年n月j日 ', $postDate) . $weekday[$cur_wday] . ' ' . $mten[$everymonth[$j][14]] . $mtwelve[$everymonth[$j][15]] . '年' . $nlmon . $nlday;
		//$lunarCalendar2 = array('year' => $year, 'yearname' => $mten[$everymonth[$j][14]] . $mtwelve[$everymonth[$j][15]] . '年', 'displaymonth' => $nlmon, 'displayday' => $nlday, 'displayweek' => $weekday[$cur_wday], 'month' => $numMonth, 'day' => $numDay);
		return $lunarCalendar;
	}
}

/**
 * 速查干支纪日法
 *
 * @access public
 * @param string $year 年
 * @param string $month 月
 * @param string $day 日
 * @return string
 */
if ( ! function_exists('get_ganzhi')) 
{
	function get_ganzhi($year = NULL, $month = NULL, $day = NULL)
	{
		$year = intval(substr($year, -2));
		$month = intval($month);
		$day = intval($day);

		if($year == 0 || $month == 0 || $day == 0) {
			exit('【年 月 日】必须要正确填写!');
		}

		// 农历天干
		// 1  2  3  4  5  6  7  8  9  0 
		// 甲 乙 丙 丁 戊 己 庚 辛 壬 癸 
		$mten = array('癸', '甲', '乙', '丙', '丁', '戊', '己', '庚', '辛', '壬');
		// 农历地支
		$mtwelve = array('亥', '子', '丑', '寅', '卯', '辰', '巳', '午', '未', '申', '酉', '戌');

		// 1月和2月按上一年的13月和14月来算
		if($month == 1) {
			$year = $year - 1;
			$month = 13;
		} else if($month == 2) {
			$year = $year - 1;
			$month = 14;
		}

		// 世纪数减一
		$c = 20;
		// 奇数月i=0，偶数月i=6
		$i = ($month % 2 == 0) ? 6 : 0;
		
		// (int)表示 取整
		$tiangan = (4*$c + (int)($c / 4) + 5*$year + (int)($year / 4) + (int)(3 * ($month + 1) / 5) + $day - 3) % 10;
		$dizhi   = (8*$c + (int)($c / 4) + 5*$year + (int)($year / 4) + (int)(3 * ($month + 1) / 5) + $day + 7 + $i) % 12;

		return $mten[$tiangan] . $mtwelve[$dizhi];
	}
}

/**
 * 六十干支的 五行计算法
 *
 * @access public
 * @param string $sixty_ganzhi 六十干支
 * @return string
 */
if ( ! function_exists('get_sixty_wuxing')) 
{
	function get_sixty_wuxing($sixty_ganzhi)
	{
		$sixty_wuxing = array(
			'甲子'=>'金','乙丑'=>'金','丙寅'=>'火','丁卯'=>'火','戊辰'=>'木',
			'己巳'=>'木','庚午'=>'土','辛未'=>'土','壬申'=>'金','癸酉'=>'金',
			'甲戌'=>'火','乙亥'=>'火','丙子'=>'水','丁丑'=>'水','戊寅'=>'土',
			'己卯'=>'土','庚辰'=>'金','辛巳'=>'金','壬午'=>'木','癸未'=>'木',
			'甲申'=>'水','乙酉'=>'水','丙戌'=>'土','丁亥'=>'土','戊子'=>'火',
			'己丑'=>'火','庚寅'=>'木','辛卯'=>'木','壬辰'=>'水','癸巳'=>'水',
			'甲午'=>'金','乙未'=>'金','丙申'=>'火','丁酉'=>'火','戊戌'=>'木',
			'己亥'=>'木','庚子'=>'土','辛丑'=>'土','壬寅'=>'金','癸卯'=>'金',
			'甲辰'=>'火','乙巳'=>'火','丙午'=>'水','丁未'=>'水','戊申'=>'土',
			'己酉'=>'土','庚戌'=>'金','辛亥'=>'金','壬子'=>'木','癸丑'=>'木',
			'甲寅'=>'水','乙卯'=>'水','丙辰'=>'土','丁巳'=>'土','戊午'=>'火',
			'己未'=>'火','庚申'=>'木','辛酉'=>'木','壬戌'=>'水','癸亥'=>'水'
		);

		return $sixty_wuxing[$sixty_ganzhi];
	}
}

/**
 * 六十干支 纪年法
 *
 * @access public
 * @param string $year 年
 * @param string $month 月
 * @param string $day 日
 * @return string
 */
if ( ! function_exists('get_sixty_year')) 
{
	function get_sixty_year($year = NULL, $month = NULL, $day = NULL)
	{
		$sixty = array(
			'甲子','乙丑','丙寅','丁卯','戊辰','己巳','庚午','辛未','壬申','癸酉',
			'甲戌','乙亥','丙子','丁丑','戊寅','己卯','庚辰','辛巳','壬午','癸未',
			'甲申','乙酉','丙戌','丁亥','戊子','己丑','庚寅','辛卯','壬辰','癸巳',
			'甲午','乙未','丙申','丁酉','戊戌','己亥','庚子','辛丑','壬寅','癸卯',
			'甲辰','乙巳','丙午','丁未','戊申','己酉','庚戌','辛亥','壬子','癸丑',
			'甲寅','乙卯','丙辰','丁巳','戊午','己未','庚申','辛酉','壬戌','癸亥'
		);

		$year = intval($year);
		$month = intval($month);
		$day = intval($day);

		if($year == 0 || $month == 0 || $day == 0) {
			exit('【年 月 日】必须要正确填写!');
		}
		
		// 公元后 某年的干支计算法
		if($year % 60 < 4) {
			$y = $year % 60 + 60 - 4;
		} else {
			$y = $year % 60 - 4;
		}
		
		// 以每年的立春为分界线
		if(mktime(0, 0, 0, $month, $day, $year) >= mktime(0, 0, 0, 2, 4, $year)) {
			$rs['sixty_year_str'] = $sixty[$y].'年';
			$rs['sixty_year_int'] = $year;
			
			unset($sixty);
			return $rs;
		} else {
			$rs['sixty_year_str'] = $sixty[$y-1].'年';
			$rs['sixty_year_int'] = $year-1;
			
			unset($sixty);
			return $rs;
		}

	}
}

/**
 * 十二生肖年 获取
 *
 * @access public
 * @param string $dizhi 地支
 * @return string
 */

if ( ! function_exists('get_shengxiao')) 
{
	function get_shengxiao($sixty_year_str)
	{
		$dizhi = mb_substr($sixty_year_str, 1, 1, 'UTF-8');
		$shengxiao = array(
			'子'=>'鼠','丑'=>'牛','寅'=>'虎','卯'=>'免',
			'辰'=>'龙','巳'=>'蛇','午'=>'马','未'=>'羊',
			'申'=>'猴','酉'=>'鸡','戌'=>'狗','亥'=>'猪'	
		);

		return $shengxiao[$dizhi] . '年';
	}
}

/**
 * 相冲岁数 计算 (基准日: 2004-9-28)
 *
 * @access public
 * @param string $year 年
 * @param string $month 月
 * @param string $day 日
 * @return string
 */
if ( ! function_exists('get_suishu')) 
{
	function get_suishu($year = NULL, $month = NULL, $day = NULL)
	{
		$year = intval($year);
		$month = intval($month);
		$day = intval($day);

		if($year == 0 || $month == 0 || $day == 0) {
			exit('【年 月 日】必须要正确填写!');
		}
		
		// 基准日
		$start = mktime(0, 0, 0, 9, 28, 2004);
		// 结束日
		$end   = mktime(0, 0, 0, $month, $day, $year);
		
		if ($year >= 2004) {
			for($i=2004; $i<=$year; $i++)
			{
				// >= 2004年的 立春 数组
				$lichun[$i] = round(mktime(0, 0, 0, 2, 4, $i)/(24*3600));
			}
		} else {
			for($i=$year; $i<=2004; $i++)
			{
				// < 2004年的 立春 数组
				$lichun[$i] = round(mktime(0, 0, 0, 2, 4, $i)/(24*3600));
			}
		}
		
		$start = round($start/(24*3600));
		$end   = round($end/(24*3600));		

		$flg   = 41; // 公历 2004-9-28 相冲岁数
		
		// > 2004
		if ($end > $start) 
		{
			for($i = $start+1; $i <= $end; $i++) 
			{
				$flg--;

				if($flg < 10) {
					$flg = 69;
				}
				if(in_array($i, $lichun)) {
					$flg++;
				}
			}
			
			unset($lichun);
			return $flg;

		}
		// == 2004
		else if ($end == $start) 
		{
			return $flg;

		}
		// < 2004
		else if ($end < $start) 
		{
			for($i = $end+1; $i <= $start; $i++) 
			{
				$flg++;

				if($flg > 69 ) {
					$flg = 10;
				}

				if(in_array($i, $lichun)) {
					$flg--;
				}
			}
			
			unset($lichun);
			return $flg;
		}
		
	}
}

/**
 * 相冲干支，相冲纳音 计算
 *
 * @access public
 * @param string $ganzhi 干支
 * @return array
 */
if ( ! function_exists('get_xiangchong')) 
{
	function get_xiangchong($ganzhi)
	{
		$xiangchong = array(
			'庚戌'=>array('火.木','甲辰.戊辰'),
			'辛亥'=>array('火.木','乙巳.己巳'),
			'壬子'=>array('水.土','丙午.庚午'),
			'癸丑'=>array('水.土','丁未.辛未'),
			'甲寅'=>array('土.火','戊申.丙申'),
			'乙卯'=>array('土.火','己酉.丁酉'),
			'丙辰'=>array('金.水','庚戌.壬戌'),
			'丁巳'=>array('金.水','辛亥.癸亥'),
			'戊午'=>array('木.金','壬子.丙子'),
			'己未'=>array('木.金','癸丑.乙丑'),
			'庚申'=>array('水.土','甲寅.戊寅'),
			'辛酉'=>array('水.土','乙卯.己卯'),
			'壬戌'=>array('土.火','丙辰.甲辰'),
			'癸亥'=>array('土.火','丁巳.乙巳'),
			'甲子'=>array('火.木','戊午.壬午'),
			'乙丑'=>array('火.木','己未.癸未'),
			'丙寅'=>array('木.金','庚申.壬申'),
			'丁卯'=>array('木.金','辛酉.癸酉'),
			'戊辰'=>array('水.土','壬戌.丙戌'),
			'己巳'=>array('水.土','癸亥.丁亥'),
			'庚午'=>array('金.水','甲子.丙子'),
			'辛未'=>array('金.水','乙丑.丁丑'),
			'壬申'=>array('火.木','丙寅.庚寅'),
			'癸酉'=>array('火.木','丁卯.辛卯'),
			'甲戌'=>array('木.金','戊辰.庚辰'),
			'乙亥'=>array('木.金','己巳.辛巳'),
			'丙子'=>array('土.火','庚午.戊午'),
			'丁丑'=>array('土.火','辛未.己未'),
			'戊寅'=>array('金.水','壬申.甲申'),
			'己卯'=>array('金.水','癸酉.乙酉'),
			'庚辰'=>array('火.木','甲戌.戊戌'),
			'辛巳'=>array('火.木','乙亥.己亥'),
			'壬午'=>array('水.土','丙子.庚子'),
			'癸未'=>array('水.土','丁丑.辛丑'),
			'甲申'=>array('土.火','戊寅.丙寅'),
			'乙酉'=>array('土.火','己卯.丁卯'),
			'丙戌'=>array('金.水','庚辰.壬辰'),
			'丁亥'=>array('金.水','辛巳.癸巳'),
			'戊子'=>array('木.金','壬午.丙午'),
			'己丑'=>array('木.金','癸未.乙未'),
			'庚寅'=>array('水.土','甲申.戊申'),
			'辛卯'=>array('水.土','乙酉.己酉'),
			'壬辰'=>array('土.火','丙戌.甲戌'),
			'癸巳'=>array('土.火','丁亥.乙亥'),
			'甲午'=>array('火.木','戊子.壬子'),
			'乙未'=>array('火.木','己丑.癸丑'),
			'丙申'=>array('木.金','庚寅.壬寅'),
			'丁酉'=>array('木.金','辛卯.癸卯'),
			'戊戌'=>array('水.土','壬辰.丙辰'),
			'己亥'=>array('水.土','癸巳.丁巳'),
			'庚子'=>array('金.水','甲午.丙午'),
			'辛丑'=>array('金.水','乙未.丁未'),
			'壬寅'=>array('火.木','丙申.庚申'),
			'癸卯'=>array('火.木','丁酉.辛酉'),
			'甲辰'=>array('木.金','戊戌.庚戌'),
			'乙巳'=>array('木.金','己亥.辛亥'),
			'丙午'=>array('土.火','庚子.戊子'),
			'丁未'=>array('土.火','辛丑.己丑'),
			'戊申'=>array('金.水','壬寅.甲寅'),
			'己酉'=>array('金.水','癸卯.乙卯')
		);
		
		$x = $xiangchong[$ganzhi];
		$result['xiangchong_nayin'] = '[' . $x[0] . ']';
		$result['xiangchong_ganzhi'] = '[' . $x[1] . ']';

		return $result;
	}
}

/**
 * 九宫星 计算 (基准日: 2004-9-28)
 *
 * @access public
 * @param string $year 年
 * @param string $month 月
 * @param string $day 日
 * @return string
 */
if ( ! function_exists('get_jgx')) 
{
	function get_jgx($year = NULL, $month = NULL, $day = NULL)
	{
		$year = intval($year);
		$month = intval($month);
		$day = intval($day);

		if($year == 0 || $month == 0 || $day == 0) {
			exit('【年 月 日】必须要正确填写!');
		}

		$jgx = array('一白','二黑','三碧','四绿','五黄','六白','七赤','八白','九紫');
		$sixty = array(
			'甲子','乙丑','丙寅','丁卯','戊辰','己巳','庚午','辛未','壬申','癸酉',
			'甲戌','乙亥','丙子','丁丑','戊寅','己卯','庚辰','辛巳','壬午','癸未',
			'甲申','乙酉','丙戌','丁亥','戊子','己丑','庚寅','辛卯','壬辰','癸巳',
			'甲午','乙未','丙申','丁酉','戊戌','己亥','庚子','辛丑','壬寅','癸卯',
			'甲辰','乙巳','丙午','丁未','戊申','己酉','庚戌','辛亥','壬子','癸丑',
			'甲寅','乙卯','丙辰','丁巳','戊午','己未','庚申','辛酉','壬戌','癸亥'
		);

		// 基准日
		$start = round(mktime(0, 0, 0, 9, 28, 2004)/(24*3600));
		// 我自定义的范围
		$scope = round(mktime(0, 0, 0, 1, 1, 2030)/(24*3600));
		// 结束日
		$end   = round(mktime(0, 0, 0, $month, $day, $year)/(24*3600));
		// 离冬至和夏至最近的 乙丑的Unix时间戳
		$yichou = array(
			1102809600,1118361600,1133913600,1149465600,1165017600,1180569600,1196121600,
			1211673600,1227225600,1242777600,1258329600,1273881600,1289433600,1304985600,
			1320537600,1336089600,1351641600,1367193600,1382745600,1398297600,1419033600,
			1434585600,1450137600,1465689600,1481241600,1496793600,1512345600,1527897600,
			1543449600,1559001600,1574553600,1590105600,1605657600,1621209600,1636761600,
			1652313600,1667865600,1683417600,1698969600,1714521600,1730073600,1745625600,
			1766361600,1781913600,1797465600,1813017600,1828569600,1844121600,1859673600,
			1875225600,1890777600
		);
		
		
		if ($end >= $start) {
			/* $yichou 的计算公式,由于效率问题直接整合成了数组，不用每次都要计算！
			include 'jieqi.php';
			$day_flg = 1;
			for($i=$start+1; $i<=$scope; $i++) 
			{
				$dt = mktime(0, 0, 0, 9, 28+$day_flg, 2004);
				$y = intval(date('Y', $dt));
				$m = intval(date('m', $dt));
				$d = intval(date('d', $dt));

				if ($m == 6 || $m == 12) {
					if ($d > 20 && $d < 24) {
						$jieqi = solar_term($y, $m, $d);
						if ($jieqi == '夏至' || $jieqi == '冬至') {
							$ganzhi = get_ganzhi($y, $m, $d);

							$idx = array_search($ganzhi, $sixty);
							//$yichou = date('Y-m-d', mktime(0, 0, 0, $m, $d-$idx+1, $y));
							$yichou[] = mktime(0, 0, 0, $m, $d-$idx+1, $y);
						}
					}
				}

				$day_flg++;
			}*/

			$day_flg = 1;
			$jgs_flg = 6;
			for($i = $start + 1; $i <= $end; $i++) 
			{
				$jgs_flg++;
				if ($jgs_flg > 8) {
					$jgs_flg = 0;
				}
				
				$x = mktime(0, 0, 0, 9, 28+$day_flg, 2004);
				$y = intval(date('Y', $x));
				$m = intval(date('m', $x));
				$d = intval(date('d', $x));

				$ganzhi = get_ganzhi($y, $m, $d);
				if ($ganzhi == '乙丑') 
				{
					if (in_array($x, $yichou)) 
					{
						$jgx = array_reverse($jgx);
					}
				}	

				if ($jgs_flg < 0) {
					$jgs_flg = 8;
				}

				$day_flg++;

			}

			return  $jgx[$jgs_flg];
		}
	}
}


//$lunarCalendar = getLunarCalendar('2005', '12', '31');
//print_r($lunarCalendar);echo '<br>';
//$lunarCalendar = getLunarCalendar('2002', '1', '1');
//print_r($lunarCalendar);echo '<br>';



//echo get_jgx('2004', '12', '11');

/* End of file MY_lunar_helper.php */
/* Location: ./application/helpers/MY_lunar_helper.php */